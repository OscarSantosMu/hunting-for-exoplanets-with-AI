# actionlint: disable=expr
name: Build and Push API Image

on:
  push:
    branches: [ main ]
    paths:
      - "infra/docker/Dockerfile.api"
      - "web/api/**"
      - "src/exoplanet_ai/api/**"

permissions:
  id-token: write   # for OIDC login to Azure
  contents: read

env:
  # Customize these or move to repo "Variables" if you like
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID:       ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID:       ${{ secrets.AZURE_CLIENT_ID }}
  RESOURCE_GROUP:        exop-ai-rg
  CONTAINERAPPS_ENV:     exop-ai-cae
  CONTAINERAPP_NAME:     exop-ai-api
  ACR_NAME:              exopacr
  IMAGE_NAME:            exop-ai-api
  IMAGE_TAG:             ${{ github.sha }}
  LOCATION:              eastus
  PORT:                  "8000"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure Azure Container Registry exists
        shell: bash
        run: |
          if ! az acr show -n "$ACR_NAME" -g "$RESOURCE_GROUP" &>/dev/null; then
            az acr create -n "$ACR_NAME" -g "$RESOURCE_GROUP" --sku Basic -l "$LOCATION"
          fi
          echo "ACR_LOGIN_SERVER=$(az acr show -n "$ACR_NAME" -g "$RESOURCE_GROUP" --query loginServer -o tsv)" >> $GITHUB_ENV

      - name: Build & push image to ACR (using ACR Tasks)
        # ACR builds on Azure infra; no docker login required on runner
        run: |
            az acr build \
            --registry "$ACR_NAME" \
            --image "$IMAGE_NAME:$IMAGE_TAG" \
            --file infra/docker/Dockerfile.api \
            .

      - name: Ensure Container Apps environment exists
        run: |
          az extension add -n containerapp --upgrade
          if ! az containerapp env show -g "$RESOURCE_GROUP" -n "$CONTAINERAPPS_ENV" &>/dev/null; then
            az containerapp env create -g "$RESOURCE_GROUP" -n "$CONTAINERAPPS_ENV" -l "$LOCATION"
          fi

      - name: Create or update Container App (with external ingress)
        id: upsert
        run: |
          IMAGE="${ACR_LOGIN_SERVER}/${IMAGE_NAME}:${IMAGE_TAG}"

          # Create if not exists
          if ! az containerapp show -g "$RESOURCE_GROUP" -n "$CONTAINERAPP_NAME" &>/dev/null; then
            az containerapp create \
              -g "$RESOURCE_GROUP" -n "$CONTAINERAPP_NAME" \
              --environment "$CONTAINERAPPS_ENV" \
              --image "$IMAGE" \
              --ingress external --target-port "$PORT" \
              --min-replicas 1 --max-replicas 2 \
              --registry-server "$ACR_LOGIN_SERVER" \
              --query properties.configuration.ingress.fqdn -o tsv
          else
            az containerapp update \
              -g "$RESOURCE_GROUP" -n "$CONTAINERAPP_NAME" \
              --image "$IMAGE" \
              --set-env-vars "PORT=$PORT" \
              --ingress external --target-port "$PORT" \
              --min-replicas 1 --max-replicas 2 \
              --registry-server "$ACR_LOGIN_SERVER" \
              --query properties.configuration.ingress.fqdn -o tsv
          fi

      - name: Grant ACR pull to Container App's managed identity (idempotent)
        # Needed once; safe to run each deploy
        run: |
          PRINCIPAL_ID=$(az containerapp show -g "$RESOURCE_GROUP" -n "$CONTAINERAPP_NAME" --query identity.principalId -o tsv)
          ACR_ID=$(az acr show -n "$ACR_NAME" -g "$RESOURCE_GROUP" --query id -o tsv)
          # Assign 'AcrPull' so the Container App can pull from the private ACR
          az role assignment create --assignee "$PRINCIPAL_ID" --role "AcrPull" --scope "$ACR_ID" 2>/dev/null || true

      - name: Output public URL
        run: |
          FQDN=$(az containerapp show -g "$RESOURCE_GROUP" -n "$CONTAINERAPP_NAME" --query properties.configuration.ingress.fqdn -o tsv)
          echo "Your app is available at: https://${FQDN}"